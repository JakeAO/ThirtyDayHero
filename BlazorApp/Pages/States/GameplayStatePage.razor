@using SadPumpkin.Games.ThirtyDayHero.BlazorApp.Shared
@using SadPumpkin.Games.ThirtyDayHero.BlazorApp.Shared.ActorViews
@using SadPumpkin.Games.ThirtyDayHero.BlazorApp.Shared.DialogViews
@using SadPumpkin.Games.ThirtyDayHero.BlazorApp.States
@using SadPumpkin.Util.CombatEngine.Actor

@inject DialogService DialogService

<GameplayHeaderBar/>

<div style="display: flex;justify-content: stretch">
    <div style="flex-grow: 1">
        <RadzenButton
            Text="Inventory"
            Click="@OnInventoryPressed"/>
    </div>
    <div style="flex-grow: 5;display: flex;flex-direction: column;justify-content: stretch;">
        <div style="text-align: center;min-width: 400px;min-height: 300px;border: 2px solid black;justify-content: center">
            <h3 style="width: 100%;background-color: dimgrey;text-align: center">Camp</h3>
            <h2>TODO</h2>
            <h2>Campsite Art</h2>
        </div>
        <div style="display: flex;flex-direction: row;justify-content: center">
            @foreach (PlayerCharacter playerCharacter in BlazorState.Party.Characters)
            {
                <ActorQuickView
                    Actor="@playerCharacter"/>
            }
        </div>
        <hr/>
        <div style="display: flex;justify-content: center;flex: fit-content;flex-direction: column;padding-inline: 3px">
            @foreach (GameplayState.IEventOption eventOption in BlazorState.EventOptions.OrderBy(x => x.Priority))
            {
                switch (eventOption)
                {
                    case GameplayState.SingleOption singleOption:
                    {
                        <RadzenButton Click="@singleOption.Select.Invoke"
                                      Text="@singleOption.Text"
                                      Title="@singleOption.Tooltip"
                                      Style="width: 33%"/>
                        break;
                    }
                    case GameplayState.MultipleOption multipleOption:
                    {
                        <RadzenSplitButton Click="item => multipleOption.Select.Invoke(item?.Value ?? multipleOption.DefaultValue)"
                                           Text="@multipleOption.Text"
                                           Title="@multipleOption.Tooltip"
                                           Style="width: 33%">
                            <ChildContent>
                                @foreach (var itemTuple in multipleOption.AlternateOptions)
                                {
                                    <RadzenSplitButtonItem Text="@itemTuple.text"
                                                           Title="@itemTuple.tooltip"
                                                           Value="@itemTuple.value"/>
                                }
                            </ChildContent>
                        </RadzenSplitButton>
                        break;
                    }
                }
            }
        </div>
    </div>
    <div style="flex-grow: 1">
    </div>
</div>

@code 
{
    [Parameter]
    public GameplayState BlazorState { get; set; }

    private void OnInventoryPressed(MouseEventArgs args)
    {
        DialogService.Open<InventoryDialogView>(
            "Inventory",
            new Dictionary<string, object>()
            {
                {"Inventory", BlazorState.Party.Inventory}
            },
            new DialogOptions()
            {
                ShowClose = true,
                ShowTitle = true,
                Width = "800px",
                Height = "600px"
            });
    }
}