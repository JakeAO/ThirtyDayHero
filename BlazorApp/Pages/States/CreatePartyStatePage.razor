@using SadPumpkin.Games.ThirtyDayHero.BlazorApp.States
@using SadPumpkin.Games.ThirtyDayHero.BlazorApp.Shared.ActorViews
@using SadPumpkin.Util.CombatEngine.Actor

@inject FirebaseWrapper FbWrapper;
@inject IContext Context;
@inject IStateMachine StateMachine;

<div class="main-window">
    <div class="main-column">
        <h1 title="@($"{_calamity.Class.Name}: {_calamity.Class.Desc}")">Calamity: @_calamity.Name</h1>
        <RadzenButton
            Text="Begin Adventure"
            Click="@OnButtonPressed"
            Disabled="@(_activeParty.Count == 0)"/>
        <hr/>
        <h2>Active Party (@_activeParty.Count/3)</h2>
        <div class="character-section">
            @foreach (PlayerCharacter character in _activeParty)
            {
                <RadzenCard Style="float: left">
                    <ActorQuickView Actor="@character"/>
                    <RadzenButton
                        Text="Deselect"
                        Click="@(() => MoveToAvailable(character))"/>
                </RadzenCard>
            }
        </div>
        <hr/>
        <h2>Available Recruits</h2>
        <div class="character-section">
            @foreach (PlayerCharacter character in _availableHeroes)
            {
                <RadzenCard Style="float: left">
                    <ActorQuickView Actor="@character"/>
                    <RadzenButton
                        Text="Select"
                        Click="@(() => MoveToActive(character))"
                        Disabled="@(_activeParty.Count == 3)"/>
                </RadzenCard>
            }
        </div>
    </div>
</div>

@code 
{
    [Parameter]
    public CreatePartyState BlazorState { get; set; }

    private Character _calamity = null;
    private readonly List<PlayerCharacter> _activeParty = new List<PlayerCharacter>(3);
    private readonly List<PlayerCharacter> _availableHeroes = new List<PlayerCharacter>(5);

    protected override void OnInitialized()
    {
        _calamity = BlazorState.Calamity;
        _availableHeroes.AddRange(BlazorState.GeneratedCharacters);
    }

    private void MoveToActive(PlayerCharacter character)
    {
        if (_availableHeroes.Contains(character) &&
            _activeParty.Count < 3)
        {
            _availableHeroes.Remove(character);
            _activeParty.Add(character);
        }
    }

    private void MoveToAvailable(PlayerCharacter character)
    {
        if (_activeParty.Contains(character))
        {
            _activeParty.Remove(character);
            _availableHeroes.Add(character);
        }
    }

    private async void OnButtonPressed(MouseEventArgs args)
    {
        PartyDataWrapper partyData = new PartyDataWrapper(
            (uint) BlazorState.NewPartyGuid.GetHashCode(),
            _activeParty,
            BlazorState.GeneratedInventory,
            _calamity);

        Context.Set(partyData);
        await FbWrapper.WriteData(partyData.GetDataPath(FbWrapper.UserId), partyData);

        if (Context.TryGet(out PlayerDataWrapper playerData))
        {
            playerData.SetActiveParty((uint) BlazorState.NewPartyGuid.GetHashCode());
            await FbWrapper.WriteData(playerData.GetDataPath(FbWrapper.UserId), playerData);
        }

        StateMachine.ChangeState<StartupState>();
    }

}