@using SadPumpkin.Games.ThirtyDayHero.BlazorApp.States.Combat
@using SadPumpkin.Util.CombatEngine.Actor
@using SadPumpkin.Games.ThirtyDayHero.BlazorApp.Shared.ActorViews
@using SadPumpkin.Games.ThirtyDayHero.BlazorApp.Shared.DialogViews
@using SadPumpkin.Util.CombatEngine.Abilities
@using SadPumpkin.Util.CombatEngine.Action
@using SadPumpkin.Util.CombatEngine.StateChangeEvents

@inject DialogService DialogService
@inject NotificationService NotificationService
@inject ContextMenuService ContextMenuService

<div class="main-window">
    <div class="main-column">
        <div class="prompt-section">
            <h3 style="width: 100%;background-color: dimgrey;text-align: center">Battle</h3>
            <div style="display: flex;flex-direction: row;justify-content: center">
                @foreach (ICharacterActor character in BlazorState.CombatSettings.Enemies)
                {
                    <div style="@(character.Id == BlazorState.CurrentGameState?.ActiveActor?.Id ? "border: 2px solid green" : "")">
                        <EnemyView Actor="@character"
                                   Definition="@BlazorState.EnemyDefinitionsById[character.Id]"/>
                    </div>
                }
            </div>
        </div>
        <div class="character-section">
            @foreach (IPlayerCharacterActor character in BlazorState.PlayerController.Characters)
            {
                <div style="float: left">
                    <div style="@(character.Id == BlazorState.CurrentGameState?.ActiveActor?.Id ? "border: 3px solid green;" : "")">
                        <ActorQuickView Actor="@character"/>

                        @if (BlazorState.PlayerController.ActiveCharacter != null &&
                             character.Id == BlazorState.PlayerController.ActiveCharacter.Id)
                        {
                            <div class="response-section">
                                @foreach (var actionGroup in BlazorState
                                    .PlayerController
                                    .AvailableActions
                                    .GroupBy(x => x.Value.Ability.Id)
                                    .ToDictionary(x => x.First().Value.Ability,
                                        x => x.ToArray()))
                                {
                                    if (actionGroup.Value.All(x => !x.Value.Available))
                                    {
                                        <!-- Action Unavailable -->
                                        <RadzenButton Text="@actionGroup.Key.Name"
                                                      Title="@TooltipGenerator.GetTooltip(actionGroup.Key)"
                                                      Disabled="true">
                                        </RadzenButton>
                                    }
                                    else if (actionGroup.Value.Length == 1)
                                    {
                                        <!-- Action Available, No Targeting Needed -->
                                        <RadzenButton Text="@actionGroup.Key.Name"
                                                      Title="@(TooltipGenerator.GetTooltip(actionGroup.Key) + "\n" + GetActionTargets(actionGroup.Value[0].Value))"
                                                      Click="args => OnAbilitySelected(actionGroup.Value[0].Key)">
                                        </RadzenButton>
                                    }
                                    else
                                    {
                                        <!-- Action Available, Target Selection Required -->
                                        <RadzenSplitButton Text="@actionGroup.Key.Name"
                                                           Icon="location_searching"
                                                           Title="@TooltipGenerator.GetTooltip(actionGroup.Key)"
                                                           Click="item => OnAbilitySelected(item != null ? uint.Parse(item.Value) : 0u)">
                                            @foreach (var actionKvp in actionGroup.Value)
                                            {
                                                <RadzenSplitButtonItem Text="@GetActionTargets(actionKvp.Value)"
                                                                       Value="@actionKvp.Key.ToString()">
                                                </RadzenSplitButtonItem>
                                            }
                                        </RadzenSplitButton>
                                    }
                                }
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
    <div class="side-column">
        <RadzenButton
            Text="@(_unreadLogsCount > 0 ? $"Logs ({_unreadLogsCount})" : "Logs")"
            Click="@OnLogPressed"/>
        <h3>Turn Order</h3>
        @if (BlazorState.CurrentGameState != null)
        {
            <div style="width: 200px">
                @if (BlazorState.CurrentGameState.InitiativeOrder.First() is IInitiativePair firstPair)
                {
                    <ActorInitiativeView InitPair="@firstPair"
                                         IsPlayer="@(firstPair.Entity.Party == BlazorState.PlayerController.PartyId)"/>
                }
            </div>
            <div style="width: 175px">
                @foreach (IInitiativePair initPair in BlazorState.CurrentGameState.InitiativeOrder.Skip(1))
                {
                    <ActorInitiativeView InitPair="@initPair"
                                         IsPlayer="@(initPair.Entity.Party == BlazorState.PlayerController.PartyId)"/>
                }
            </div>
        }
    </div>
</div>

@code 
{
    [Parameter]
    public CombatRunState BlazorState { get; set; }

    private uint _unreadLogsCount = 0u;

    private string GetActionTargets(IAction action)
    {
        return $"Target(s): {string.Join(", ", action.Targets.Select(x => x.Name))}";
    }

    protected override void OnInitialized()
    {
        BlazorState.NeedsToRender += OnNeedsToRender;
        BlazorState.StateChangeEvent += OnStateChangeEvent;
    }

    private void OnNeedsToRender()
    {
        InvokeAsync(StateHasChanged);
    }

    private void OnStateChangeEvent(IStateChangeEvent changeEvent)
    {
        _unreadLogsCount++;

        NotificationService.Notify(
            NotificationSeverity.Info,
            changeEvent.Description);
    }

    private void OnLogPressed()
    {
        _unreadLogsCount = 0u;
        DialogService.Open<CombatLogDialogView>(
            "Combat Logs",
            new Dictionary<string, object>()
            {
                {"Logs", BlazorState.StateChangeRecord}
            },
            new DialogOptions()
            {
                ShowClose = true,
                ShowTitle = true,
                Width = "800px",
                Height = "600px"
            });
    }

    private void OnAbilitySelected(uint actionId)
    {
        BlazorState.PlayerController.SubmitActionResponse(actionId);
    }
}