@using SadPumpkin.Util.CombatEngine.Actor
@using SadPumpkin.Util.CombatEngine.EquipMap
@using SadPumpkin.Util.CombatEngine.Item
@using SadPumpkin.Util.CombatEngine.StatMap
@using SadPumpkin.Util.CombatEngine.Abilities
@using SadPumpkin.Games.ThirtyDayHero.Core.Decorators
@using System.Text

<RadzenCard Style=@(Actor.IsAlive() ? "width: fit-content;min-width: 200px" : "width: fit-content;min-width: 200px;background-color: lightcoral")>
    <div style="text-align: center;vertical-align: center;background-color: lightgray;width: 100%">
        <h3>@Actor.Name</h3>
    </div>
    <div class="stat-bar">
        <p><b>Lvl @Actor.Stats[StatType.LVL] <abbr title="@TooltipGenerator.GetTooltip(Actor.Class)">@Actor.Class.Name</abbr></b></p>
        <div class="health-bar">
            <b>Health:</b>
            <RadzenProgressBar ShowValue="true"
                               Visible="true"
                               Unit=" HP"
                               Mode="ProgressBarMode.Determinate"
                               Max="@Actor.Stats[StatType.HP_Max]"
                               Value="@Actor.Stats[StatType.HP]">
            </RadzenProgressBar>
        </div>
        <div class="stamina-bar">
            <b>Stamina:</b>
            <RadzenProgressBar ShowValue="true"
                               Visible="true"
                               Unit=" STA"
                               Mode="ProgressBarMode.Determinate"
                               Max="@Actor.Stats[StatType.STA_Max]"
                               Value="@Actor.Stats[StatType.STA]">
            </RadzenProgressBar>
        </div>
    </div>
    <RadzenAccordion Multiple="true">
        <Items>
            <RadzenAccordionItem Text="Stats">
                <table style="text-align: center;padding: 2px">
                    <tr>
                        @for (StatType statType = StatType.STR; statType <= StatType.CHA; statType++)
                        {
                            <th>@statType.ToString()</th>
                        }
                    </tr>
                    <tr>
                        @for (StatType statType = StatType.STR; statType <= StatType.CHA; statType++)
                        {
                            <td>@Actor.Stats[statType]</td>
                        }
                    </tr>
                </table>
            </RadzenAccordionItem>
            @if (Actor is IPlayerCharacterActor playerCharacter)
            {
                <RadzenAccordionItem Text="Equipment">
                    <table style="padding: 2px">
                        @for (EquipmentSlot equipSlot = EquipmentSlot.Weapon; equipSlot <= EquipmentSlot.ItemB; equipSlot++)
                        {
                            <tr>
                                <th style="text-align: right">@equipSlot.ToString(): </th>
                                <td style="text-align: left">
                                    @if (playerCharacter.Equipment[equipSlot] is IItem equippedItem &&
                                         GetDefinition(equippedItem.Id) is ItemDefinition itemDefinition)
                                    {
                                        <span title="@TooltipGenerator.GetTooltip(itemDefinition)">@equippedItem.Name</span>
                                        <img src="@itemDefinition.ArtName"
                                             alt="[-]"
                                             style="max-height: 32px;max-width: 32px"/>
                                    }
                                    else
                                    {
                                        <span>---</span>
                                    }
                                </td>
                            </tr>
                        }
                    </table>
                </RadzenAccordionItem>
            }
            <RadzenAccordionItem Text="Abilities">
                @foreach (IAbility ability in Actor.Class.GetAllAbilities(Actor.Stats[StatType.LVL]))
                {
                    <p title="@TooltipGenerator.GetTooltip(ability)">@ability.Name</p>
                }
            </RadzenAccordionItem>
        </Items>
    </RadzenAccordion>
</RadzenCard>

@code 
{
    [Parameter]
    public ICharacterActor Actor { get; set; }
    
    private readonly Dictionary<uint, ItemDefinition> _itemDefinitions = new Dictionary<uint, ItemDefinition>();
    
    public ItemDefinition GetDefinition(uint itemId)
    {
        if (!_itemDefinitions.TryGetValue(itemId, out var itemDefinition) || itemDefinition == null)
            _itemDefinitions[itemId] = itemDefinition = HackUtil.GetDefinition<ItemDefinition>(itemId);
        return itemDefinition;
    }

    protected override Task OnParametersSetAsync()
    {
        ShouldRender();
        return base.OnParametersSetAsync();
    }
}